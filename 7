
import math
class Fraction:
  @classmethod
  def prov(cls,b):
    if b==0:
      return False
    return True
  @staticmethod
  def int_value(a,b):
    if isinstance(a,int) and isinstance(b,int):
      pass
    else:
      raise ValueError('Need a number as int')
  @staticmethod
  def trans(a):
    b=1
    while a<1:
      b*=10
      a=a*b
    return int(a),int(b)
  def __init__(self,a,b=None):
    if b==None:
      a,b=self.trans(a)
    self.int_value(a,b)
    self.a=a
    if self.prov(b):
      self.b=b
    else:
      raise(ValueError('Cant be 0'))
    self.rd()
  def __setattr__(self, key, value):
        if key in {'a', 'b'}:
            super().__setattr__(key, value)
        else:
            raise AttributeError("Local attributes are not allowed")
  def __str__(self,val=False):
    if val==True:
      
      return(round(self.a/self.b,3))
      
    else:
      return(f'{self.a}/{self.b}')
    
  def vald(self):
    c=self.__str__(True)
    return c
  def __add__(self, other):
    if  not isinstance(other, (int, Fraction)):
      raise ArithmeticError("Правый операнд должен быть Fraction")

    sc = other
    if sc.b==self.b:
      return(f'{self.a+sc.a}/{self.b}')
    else:
      return(f'{self.a*sc.b+sc.a*self.b}/{self.b*sc.b}')
  def rd(self):
    c=math.gcd(self.a,self.b)
    self.a=self.a//c
    self.b=self.b//c
  @staticmethod
  def pr(self,other):
      if not isinstance(other, (int, Fraction,float)):
        raise TypeError("Операнд справа должен быть целым числом или объектом эксземпляра класса дроби")
  @staticmethod 
  def dr_in(self,other):
    if isinstance(other, (int,float)):
      drob=Fraction(other)
      return drob
    return other
  def __eq__(self, other):
    self.pr(self,other)
    other=self.dr_in(self,other)
    if self.a==other.a and self.b==other.b:
      return True
    else:
      return False
  def __ne__(self, other):
    self.pr(self,other)
    other=self.dr_in(self,other)
    if self.a!=other.a or self.b!=other.b:
      return True
    else:
      return False
  def __lt__(self, other):
    self.pr(self,other)
    other=self.dr_in(self,other)
    if self.a*other.b < self.b*other.a:
      return True
    else:
      return False
  def __gt__(self, other):
    self.pr(self,other)
    other=self.dr_in(self,other)
    if self.a*other.b > self.b*other.a:
      return True
    else:
      return False
  def __hash__(self):
    return hash((self.a,self.b))
f1=Fraction(1,2)
f2=Fraction(1,2)

print(f1!=0.9)
print(f1)
print(f2)
print(hash(f1)==hash(f2))
