#3
class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def __getattr__(self, item):
        return "This attribute is not available"

c = Car("Toyota", "Corolla")
print(c.make)   # Toyota
print(c.model)  # Corolla
print(c.color)  # This attribute is not available
#4
class Rectangle:
    def __init__(self, width, height):
        super().__setattr__('width', width)
        super().__setattr__('height', height)

    def __setattr__(self, key, value):
        if key in {'width', 'height'}:
            super().__setattr__(key, value)
        else:
            raise AttributeError("Local attributes are not allowed")

r = Rectangle(10, 20)
r.width = 15   # Успешно
r.height = 25  # Успешно
r.color = 'red'  # AttributeError: Local attributes are not allowed
class Fraction:
  @classmethod
  def prov(cls,b):
    print('dsad')
    if b==0:
      return False
    return True
  @staticmethod
  def int_value(a,b):
    if isinstance(a,int) and isinstance(b,int):
      pass
    else:
      raise ValueError('Need a number as int')
  @staticmethod
  def trans(a):
    b=10
    while a%b!=0:
      a=a*b
      b=b*10
    return int(a),int(b)
  def __init__(self,a,b=None):
    if b==None:
      a,b=self.trans(a)
    self.int_value(a,b)
    self.a=a
    if self.prov(b):
      self.b=b
    else:
      raise(ValueError('Cant be 0'))
  def __setattr__(self, key, value):
        if key in {'a', 'b'}:
            super().__setattr__(key, value)
        else:
            raise AttributeError("Local attributes are not allowed")
  def __str__(self,val=False):
    if val==True:
      
      return(round(self.a/self.b,3))
      
    else:
      return(f'{self.a}/{self.b}')
    
  def vald(self):
    c=self.__str__(True)
    return c
  def __add__(self, other):
    if  not isinstance(other, (int, Fraction)):
      raise ArithmeticError("Правый операнд должен быть Fraction")

    sc = other
    if sc.b==self.b:
      return(f'{self.a+sc.a}/{self.b}')
    else:
      return(f'{self.a*sc.b+sc.a*self.b}/{self.b*sc.b}')

f1=Fraction(0.1)
f2=Fraction(3,5)
print(f1)
print(f1.vald())
print(f1+f2)

class Product:
    def __init__(self, title, author, price):
        self._title = None
        self._author = None
        self._price = None

        self.title = title
        self.author = author
        self.price = price

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, value):
        if not isinstance(value, str):
            raise TypeError("Название должно быть строкой.")
        self._title = value

    @property
    def author(self):
        return self._author

    @author.setter
    def author(self, value):
        if not isinstance(value, str):
            raise TypeError("Автор должен быть строкой.")
        self._author = value

    @property
    def price(self):
        return self._price

    @price.setter
    def price(self, value):
        if not isinstance(value, (int, float)) or value < 0:
            raise ValueError("Цена должна быть неотрицательным числом.")
        self._price = value

    def get_discounted_price(self, discount):
        try:
            if discount < 0:
                raise ValueError("Скидка не может быть отрицательной.")
            return self.price * (1 - discount)
        except ZeroDivisionError:
            print("Ошибка деления на ноль!")
            return None

    def __str__(self):
        return f"{self.title} by {self.author}, {self.price:.2f} руб."


class Book(Product):
    def __init__(self, title, author, price, pages):
        super().__init__(title, author, price)
        self.__pages = None
        self.pages = pages

    @property
    def pages(self):
        return self.__pages

    @pages.setter
    def pages(self, value):
        if not isinstance(value, int) or value <= 0:
            raise ValueError("Количество страниц должно быть положительным целым числом.")
        self.__pages = value

    def __str__(self):
        return f"{super().__str__()} — {self.pages} страниц"


class EBook(Product):
    def __init__(self, title, author, price, file_size, file_format):
        super().__init__(title, author, price)
        self._file_size = None
        self._file_format = None

        self.file_size = file_size
        self.file_format = file_format

    @property
    def file_size(self):
        return self._file_size

    @file_size.setter
    def file_size(self, value):
        if not isinstance(value, (int, float)) or value <= 0:
            raise ValueError("Размер файла должен быть положительным числом.")
        self._file_size = value

    @property
    def file_format(self):
        return self._file_format

    @file_format.setter
    def file_format(self, value):
        if not isinstance(value, str):
            raise TypeError("Формат файла должен быть строкой.")
        self._file_format = value

    def __str__(self):
        return f"{super().__str__()} — {self.file_size}MB, формат: {self.file_format}"


# Демонстрация с обработкой исключений
try:
    paper_book = Book("Война и мир", "Лев Толстой", 750, 1300)
    ebook = EBook("1984", "Джордж Оруэлл", 300, 1.5, "PDF")

    print(paper_book)
    print("Цена со скидкой 20%:", paper_book.get_discounted_price(0.2))

    print(ebook)
    print("Цена со скидкой 0%:", ebook.get_discounted_price(0))

    # Вызовем ошибку
    broken_book = Book("Ошибка", "Автор", -100, -50)
except (TypeError, ValueError) as e:
    print("Произошла ошибка:", e)
finally:
    print("Блок try-except-finally завершён.")
